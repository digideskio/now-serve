#!/usr/bin/env node

import fs from 'fs-extra'
import tmp from 'tmp'
import md5 from 'md5'
import path from 'path'
import bin from 'commander'
import { copyContents, exists, injectPackage } from '../lib/utils'
import chalk from 'chalk'
import pkg from '../../package.json'

bin
  .version(pkg.version)
  .option('-c, --cmd [command]', 'The command to run when starting')
  .option('-p, --packages <items>', 'Custom packages to add to dependencies (comma-separated)')
  .parse(process.argv)

const file = bin.args[bin.args.length - 1]
let current = process.cwd()

if (file) {
  current = path.resolve(process.cwd(), file)
}

if (!exists(current)) {
  console.error(chalk.red('Specified path doesn\'t exist!'))
  process.exit(1)
}

const uniqueIdentifier = md5(current)

let pkgDefaults = {
  name: 'ns',
  version: '1.0.0',
  scripts: {
    start: bin.cmd || 'list ./content'
  },
  dependencies: {
    'micro-list': 'latest'
  }
}

if (bin.packages) {
  let list = bin.packages.split(',')

  for (let item of list) {
    pkgDefaults.dependencies[item] = 'latest'
  }

  if (bin.cmd) {
    delete pkgDefaults.dependencies['micro-list']
  }
}

const pkgContent = JSON.stringify(pkgDefaults, null, 2)
let tmpDir = false

try {
  tmpDir = tmp.dirSync({
    name: `now-serve-${uniqueIdentifier}`,
    keep: true
  })
} catch (err) {
  throw err
}

const details = fs.lstatSync(current)

if (details.isDirectory()) {
  copyContents(current, tmpDir.name, pkgDefaults)
} else if (details.isFile()) {
  const fileName = path.parse(current).base,
        target = path.join(tmpDir.name, '/content', fileName)

  fs.copy(current, target, err => {
    if (err) throw err
    injectPackage(tmpDir.name, pkgDefaults)
  })
} else {
  console.error(chalk.red('Path is neither a file nor a directory!'))
}
