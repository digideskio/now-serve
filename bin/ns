#!/usr/bin/env node

import fs from 'fs-extra'
import tmp from 'tmp'
import md5 from 'md5'
import path from 'path'
import { spawn } from 'child_process'
import { walk } from 'walk'
import bin from 'commander'
import pkg from '../package.json'

bin
  .version(pkg.version)
  .option('-c, --cmd [command]', 'The command to run when starting')
  .option('-p, --packages <items>', 'Custom packages to add to dependencies')
  .parse(process.argv)

const current = path.parse(process.cwd()),
      uniqueIdentifier = md5(current)

let pkgDefaults = {
  name: 'ns',
  version: '1.0.0',
  scripts: {
    start: bin.cmd || 'http-server'
  },
  dependencies: {
    'http-server': 'latest'
  }
}

if (bin.packages) {
  let list = bin.packages.split(',')

  for (let item of list) {
    pkgDefaults.dependencies[item] = 'latest'
  }

  if (bin.cmd) {
    delete pkgDefaults.dependencies['http-server']
  }
}

const ignore = [
  'node_modules'
]

const pkgContent = JSON.stringify(pkgDefaults, null, 2)
let tmpDir = false

try {
  tmpDir = tmp.dirSync({
    name: `now-serve-${uniqueIdentifier}`,
    keep: true
  })
} catch (err) {
  throw err
}

const walker = walk(process.cwd(), {
  filters: [
    'node_modules'
  ]
})

let hasPackage = false

walker.on('file', (root, fileStats, next) => {
  if (fileStats.name === 'package.json') {
    hasPackage = true
  }

  const file = path.join(root, fileStats.name),
        target = path.join(tmpDir.name, path.relative(process.cwd(), file))

  fs.copy(file, target, err => {
    if (err) throw err
    next()
  })
})

walker.on('errors', (root, nodeStatsArray, next) => {
  console.error(`Not able to copy file: ${nodeStatsArray}`)
  next()
})

const injectPackage = path => {
  try {
    fs.writeJSONSync(path, pkgDefaults)
  } catch (err) {
    throw err
  }
}

const modifyExistingPkg = path => {
  let content

  try {
    content = fs.readFileSync(path, 'utf8')
  } catch (err) {
    throw err
  }

  content = JSON.parse(content)
  Object.assign(content, pkgDefaults)

  try {
    fs.writeJSONSync(path, content)
  } catch (err) {
    throw err
  }
}

walker.on('end', () => {
  const pkgPath = path.join(tmpDir.name, 'package.json')

  if (hasPackage) {
    modifyExistingPkg(pkgPath)
  } else {
    injectPackage(pkgPath)
  }

  let oldCwd = process.cwd()
  process.chdir(tmpDir.name)

  const now = spawn('now', [], {
    stdio: 'inherit'
  })

  now.on('exit', () => {
    process.chdir(oldCwd)

    fs.remove(tmpDir.name, err => {
      if (err) throw err
      process.exit()
    })
  })

  process.on('SIGINT', () => {
    now.kill('SIGINT')
    process.exit()
  })
})
